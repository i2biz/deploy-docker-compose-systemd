---

- name: Copy context
  template:
    src: "{{ DOCKER_COMPOSE_FILE }}"
    dest: "{{ DOCKER_COMPOSE_WORKDIR }}/docker-compose.yml"
  when: DOCKER_COMPOSE_FILE is defined
  no_log: true

- name: Create env file
  template:
    src: vars.env
    dest: "{{ DOCKER_COMPOSE_WORKDIR }}/{{ item.key }}"
  with_dict: "{{ DOCKER_COMPOSE_VARS }}"
  no_log: true

- name: Log into
  docker_login:
    username: "{{ DOCKER_LOGIN_USERNAME }}"
    password: "{{ DOCKER_LOGIN_PASSWORD }}"
    registry_url: "{{ DOCKER_LOGIN_SERVICE }}"
  when: DOCKER_LOGIN_SERVICE is defined
  changed_when: false

- name: start service
  docker_service:
    project_src: "{{ DOCKER_COMPOSE_WORKDIR }}"
    pull: yes
    recreate: smart
    state: present
  register: service_status

- name: Logout from docker
  command: docker logout "{{ DOCKER_LOGIN_SERVICE }}"
  when: DOCKER_LOGIN_SERVICE is defined
  changed_when: false

- name: Copy systemd files
  template:
    src: service.unit
    dest: /etc/systemd/system/{{ DOCKER_COMPOSE_APP_NAME }}.service
  register: systemd_service

- name: Reload
  command: systemctl daemon-reload
  when: systemd_service.changed

- name: restart services
  service: name={{ DOCKER_COMPOSE_APP_NAME }}.service enabled=yes state=restarted
  when: systemd_service.changed or service_status.changed

- name: enable services
  service: name={{ DOCKER_COMPOSE_APP_NAME }}.service enabled=yes state=started
  when: not (systemd_service.changed and service_status.changed)

- name: wait for service
  pause:
    seconds: "{{ WAIT_FOR_SERVICE_TIMEOUT }}"
  when: (systemd_service.changed or service_status.changed) and WAIT_FOR_SERVICE_TIMEOUT

